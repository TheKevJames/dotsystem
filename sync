#!/usr/bin/env bash
set -euo pipefail

if [[ "$@" == *"-h"* ]]; then
    echo "syncs your system from your dotsystem config"
    echo
    echo "Options:"
    echo "  --force             force over-write of all missing/modified files"
    echo "  --secrets           include LastPass secrets pull"
    echo "  --skip-packages     do not update installed packages"

    exit 0
fi

echo "Running dotsystem..."

# Variables
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BOOTSTRAP=$(if [[ ! -f ~/.ssh/id_ed25519 ]]; then echo "y"; else echo "n"; fi)
FORCE=$(if [[ "$@" == *"--force"* ]]; then echo "y"; else echo "n"; fi)

source "${DIR}/root/~/.zshenv"

if [[ "${BOOTSTRAP}" == "y" ]]; then
    echo "Detected fresh system, beginning bootstrap mode..."
    if [[ "$@" == *"--skip-packages"* ]]; then
        if ! which m4 >/dev/null; then
            echo "m4 is not installed but --skip-packages is set, exiting."
            exit 1
        fi
        echo "--skip-packages specified, some bootstrapping will be skipped"
    fi

    # ensure m4 is installed, nothing will work without it
    if ! which m4 >/dev/null; then
        echo "Refreshing sources and installing m4..."
        eval "${PACMAN_REFRESH}" >/dev/null
        eval "${PACMAN_INSTALL} m4"
    fi

    # set hostname
    read -p "Enter system hostname: " NEW_HOSTNAME
    sudo hostname "${NEW_HOSTNAME}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sudo scutil --set HostName "${NEW_HOSTNAME}"
        sudo scutil --set LocalHostName "${NEW_HOSTNAME}"
        sudo scutil --set ComputerName "${NEW_HOSTNAME}"
    fi
    echo "Set new system hostname. Remember to reboot!"

    echo "Creating ~/.ssh/id_ed25519..."
    ssh-keygen -o -a 100 -t ed25519 -C "KevinJames@thekev.in" -f ~/.ssh/id_ed25519
fi

# TODO: move sudo out of consts?
if which zypper >/dev/null; then
    PACMAN_REFRESH="sudo zypper refresh"
    PACMAN_INSTALL="sudo zypper install"
elif which port >/dev/null; then
    PACMAN_REFRESH="sudo port sync"
    PACMAN_INSTALL="sudo port install"
elif which apt-get >/dev/null; then
    PACMAN_REFRESH="sudo apt-get update"
    PACMAN_INSTALL="sudo apt-get install"
else
    echo "ERROR: could not determine package manager."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "ERROR: please install MacPorts from https://github.com/macports/macports-base/releases/"
        exit 1
    else
        exit 1
    fi
fi

# Helpers
ensure_dir() {
    if [ ! -d "$1" ]; then
        echo "Creating $1"
        mkdir -p "$1" 2>/dev/null || sudo mkdir -p "$1"
    fi
}

ensure_file() {
    ensure_dir $(dirname "$1")
    if [ ! -f "$1" ]; then
        touch "$1" 2>/dev/null || sudo touch "$1"
    fi
}

set_file() {
    DEST=${2/\~/$HOME}
    ensure_file "${DEST}" || {
        echo "> bad permissions, skipping";
        return 0;
    }

    if ! sudo diff -q "${1}" "${DEST}" >/dev/null; then
        echo "${DEST} will be modified according to the following diff."
        sudo diff "${DEST}" "${1}" || true

        if [[ "${FORCE}" == "y" ]]; then
            cp "${1}" "${DEST}" 2>/dev/null || sudo cp "${1}" "${DEST}"
            if [[ "${DEST}" == *"/bin/"* ]]; then sudo chmod a+x "${DEST}"; fi
        else
            echo "Apply this change?"
            select yn in "Yes" "No"; do
                case $yn in
                    Yes ) cp "${1}" "${DEST}" 2>/dev/null || sudo cp "${1}" "${DEST}";
                        if [[ "${DEST}" == *"/bin/"* ]]; then sudo chmod a+x "${DEST}"; fi;
                        if [[ "${DEST}" == *"/git/template/hooks/"* ]]; then sudo chmod a+x "${DEST}"; fi;
                        break ;;
                    No )  break ;;
                esac
            done
        fi
    fi
}

if [[ "$@" == *"--secrets"* ]]; then
    if [ ! -f "${XDG_CONFIG_HOME}/dotsystem/secrets" ]; then
        echo "Not loading secrets: none defined."
    elif ! which lpass >/dev/null; then
        echo "Not loading secrets: lpass not installed."
    else
        echo "Loading secrets..."
        lpass ls >/dev/null || lpass login KevinJames@thekev.in
        for secret in $(cat "${XDG_CONFIG_HOME}/dotsystem/secrets"); do
            IFS=: read -a fields <<< "$secret"
            mkdir -p $(eval echo "${fields[1]%/*}")
            lpass show --note "${fields[0]}" > $(eval echo "${fields[1]}")
        done
    fi
fi

## Update global configs
echo "Configuring system..."

# configure retrievable config
TEMPFILE=$(mktemp)
echo "divert(-1)" > "${TEMPFILE}"
echo "define(\`M4_HOSTNAME', \`${HOSTNAME}')" >> "${TEMPFILE}"
echo "divert(0)dnl" >> "${TEMPFILE}"
set_file "${TEMPFILE}" "${XDG_DATA_HOME}/dotsystem/config.m4"

if [ ! -f "${XDG_DATA_HOME}/dotsystem/secrets.m4" ]; then
    echo "No secrets file found, writing defaults to ${XDG_DATA_HOME}/dotsystem/secrets.m4"
    mkdir -p "${XDG_DATA_HOME}/dotsystem/"
    cp "${DIR}/secrets.m4.sample" "${XDG_DATA_HOME}/dotsystem/secrets.m4"
fi

IFS=$(echo -en "\n\b"); for file in $(find "${DIR}/root" -type f); do
    if [[ "${file##*.}" == "m4" ]]; then
        TEMPFILE=$(mktemp)
        m4 \
            "${XDG_DATA_HOME}/dotsystem/config.m4" \
            "${XDG_DATA_HOME}/dotsystem/secrets.m4" \
            "${file}" 2>/dev/null > "${TEMPFILE}"
        file_noext="${file%.*}"
        set_file "${TEMPFILE}" "/${file_noext#${DIR}/root/}"
    elif [[ "${file##*.}" == "once" ]]; then
        file_noext="${file%.*}"
        DEST="/${file_noext#${DIR}/root/}"
        DEST=${DEST/\~/$HOME}
        if [[ ! -f "$DEST" ]]; then
            set_file "${file}" "${DEST}"
        fi
    else
        set_file "${file}" "/${file#${DIR}/root/}"
    fi
done

## Configure OSX one-offs
if [[ "$OSTYPE" == "darwin"* ]]; then
    sudo cp "${XDG_CONFIG_HOME}"/osx/in.thekev.caffeinate.plist /Library/LaunchAgents/in.thekev.caffeinate.plist
    bash "${XDG_CONFIG_HOME}"/osx/config.sh

    # TODO: better multi-os paths
    IFS=$(echo -en "\n\b"); for file in $(find "${DIR}/root/~/.config/sublime-text-3" -type f); do
        set_file "${file}" "~/Library/Application Support/Sublime Text 3/${file#${DIR}/root/~/.config/sublime-text-3/}"
    done
fi

echo "done."

if [[ "$@" == *"--skip-packages"* ]]; then
    exit 0
fi

## Install packages
echo "Refreshing sources..."
eval "${PACMAN_REFRESH}" >/dev/null

packages=()
for package in $(cat "${XDG_CONFIG_HOME}/dotsystem/packages"); do
    IFS=: read -a fields <<< "$package"

    name="${fields[0]}"
    binary="${fields[1]:-${fields[0]}}"

    if ! which $name >/dev/null 2>&1 && ! which $binary >/dev/null 2>&1; then
        packages+=("${name}")
    fi
done

echo "Installing packages..."
if [[ "${packages[@]:-}" != "" ]]; then
    eval "${PACMAN_INSTALL} ${packages[@]}"
fi

## Configure OSX one-offs
if [[ "$OSTYPE" == "darwin"* ]]; then
    # force override of OSX's way out-of-date builtin
    if [[ ! -f "/opt/local/bin/zsh" ]]; then
        sudo port install zsh
        echo "/opt/local/bin/zsh" | sudo tee -a /etc/shells
    fi
fi

## Install outside-of-package-manager packages
# TODO: re-alphabetize once language package managers are better supported
if grep -q "cargo:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which cargo >/dev/null; then
        TEMPFILE=$(mktemp)
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > "${TEMPFILE}.sh"
        sh "${TEMPFILE}.sh" -y --no-modify-path
    fi
fi

if grep -q "python2:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which python2 >/dev/null; then
        if [[ -f /etc/os-release ]] && grep -q Ubuntu /etc/os-release; then
            eval "${PACMAN_INSTALL} python"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} python27"
        else
            eval "${PACMAN_INSTALL} python2"
        fi
    fi

    if ! python2 -m pip --version >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} py27-pip"
        else
            # TODO: handle distros where this is bundled already
            eval "${PACMAN_INSTALL} python2-pip"
        fi
    fi
fi

if grep -q "python3:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which python3 >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} py37-pip"
        else
            eval "${PACMAN_INSTALL} python3"
        fi
    fi

    if ! python3 -m pip --version >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} py37-pip"
        else
            # TODO: handle distros where this is bundled already
            eval "${PACMAN_INSTALL} python3-pip"
        fi
    fi

    # TODO: maybe a "libs" section in the config?
    if ! python3 -m pip freeze | grep pynvim >/dev/null; then
        python3 -m pip install --user pynvim
    fi
fi

if grep -q "pipx:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    # TODO: sort out the pip user path outside of OSX
    # if ! which pipx >/dev/null; then
    if [[ ! -f /Users/kevin/Library/Python/3.7/bin/pipx ]]; then
        python3 -m pip install --user pipx
    fi
fi

if grep -q "alacritty:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! -f /Applications/Alacritty.app/Contents/MacOS/alacritty ]]; then
            brew cask install alacritty
        fi
    else
        if ! which alacritty >/dev/null; then
            eval "${PACMAN_INSTALL} alacritty"
        fi
    fi
fi

if grep -q "bat:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which bat >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install bat
    fi
fi

if grep -q "docker:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which docker >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            brew cask install docker
        elif [[ -f /etc/os-release ]] && grep -q Ubuntu /etc/os-release; then
            # https://docs.docker.com/install/linux/docker-ce/ubuntu/
            sudo apt-get update -qy
            sudo apt-get install -qy apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
        else
            eval "${PACMAN_INSTALL} docker"
        fi
    fi
fi

if grep -q "dropbox:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! -f "/Applications/Dropbox.app/Contents/MacOS/Dropbox" ]]; then
            brew cask install dropbox
        fi
    else
        if ! which dropbox >/dev/null; then
            eval "${PACMAN_INSTALL} dropbox"
        fi
    fi
fi

if grep -q "exa:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which exa >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install exa
    fi
fi

if grep -q "fd:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which fd >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install fd-find
    fi
fi

if grep -q "firefox:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! -f "/Applications/Firefox.app/Contents/MacOS/firefox" ]]; then
            brew cask install firefox
        fi
    else
        if ! which firefox >/dev/null; then
            eval "${PACMAN_INSTALL} firefox"
        fi
    fi
fi

if grep -q "ferdi:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which ferdi >/dev/null; then
        TEMPFILE=$(mktemp)
        if [[ "$OSTYPE" == "darwin"* ]]; then
            brew cask install ferdi
            sudo ln -s /Applications/Ferdi.app/Contents/MacOS/Ferdi /usr/local/bin/ferdi

            mkdir -p ~/.config/Ferdi/recipes/dev/
            git clone https://github.com/TheKevJames/franz-recipe-dialpad.git ~/.config/Ferdi/recipes/dev/dialpad
        else
            curl -fsSL "https://github.com/getferdi/ferdi/releases/download/v5.5.0/ferdi-5.5.0.tar.gz" > "${TEMPFILE}.tgz"
            tar xzf "${TEMPFILE}.tgz" -C /opt/ferdi
            sudo ln -s /opt/ferdi/Franz /usr/local/bin/ferdi

            mkdir -p ~/Library/Application\ Support/Ferdi/recipes/dev/
            git clone https://github.com/TheKevJames/franz-recipe-dialpad.git ~/Library/Application\ Support/Ferdi/recipes/dev/dialpad
        fi
    fi
fi

if grep -q "gcloud:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which gcloud >/dev/null; then
        TEMPFILE=$(mktemp)
        if [[ "$OSTYPE" == "darwin"* ]]; then
            curl -fsSL "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-278.0.0-darwin-x86_64.tar.gz" > "${TEMPFILE}.tgz"
        else
            curl -fsSL "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-278.0.0-linux-x86_64.tar.gz" > "${TEMPFILE}.tgz"
        fi
        tar xzf "${TEMPFILE}.tgz" -C "${XDG_SRC_HOME}"

        # TODO: move to packages configuration file
        yes | "${XDG_SRC_HOME}/google-cloud-sdk/bin/gcloud" components install gsutil kubectl || true
    fi
fi

if grep -q "git-standup:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which git-standup >/dev/null; then
        git clone https://github.com/kamranahmedse/git-standup.git "${XDG_SRC_HOME}/git-standup"
        (
            cd "${XDG_SRC_HOME}/git-standup"
            sudo make install
        )
    fi
fi

if grep -q "gitify:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! -f "/Applications/Gitify.app/Contents/MacOS/Gitify" ]]; then
            brew cask install gitify
        fi
    fi
fi

# TODO: move to packages configuration file
if grep -q "go" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    export GOPATH="${XDG_DATA_HOME}/go"
    if [ ! -f "${XDG_DATA_HOME}/go/bin/gmailctl" ]; then
        go get -u github.com/mbrt/gmailctl/cmd/gmailctl
    fi
    if [ ! -f "${XDG_DATA_HOME}/go/bin/jira" ]; then
        # TODO: should this envvar get globally enabled?
        GO111MODULE=on go get -u github.com/go-jira/jira/cmd/jira
    fi
    if [ ! -f "${XDG_DATA_HOME}/go/bin/passphrase2pgp" ]; then
        GO111MODULE=on go get -u nullprogram.com/x/passphrase2pgp
    fi
fi

# TODO: on macports, this could be `port install gnupg -pinentry +pinentry_mac`
if grep -q "gpg:gnupg" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [ ! -f "/Applications/MacPorts/pinentry-mac.app/Contents/MacOS/pinentry-mac" ]; then
            sudo port install pinentry-mac
        fi
    fi
fi

if grep -q "hexyl:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which hexyl >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install hexyl
    fi
fi

if grep -q "hub:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which hub >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install hub
        else
            TEMPFILE=$(mktemp)
            curl -fsSL "https://github.com/github/hub/releases/download/v2.5.0/hub-linux-amd64-2.5.0.tgz" > "${TEMPFILE}.tgz"
            tar xzf "${TEMPFILE}.tgz" -C "${TMPDIR:-/tmp}"
            sudo mv "${TMPDIR:-/tmp}"/hub-*/bin/hub /usr/local/bin
        fi
    fi
fi

if grep -q "hyperfine:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which hyperfine >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install hyperfine
    fi
fi

if grep -q "neovim:nvim" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [ ! -f "${XDG_DATA_HOME}/nvim/site/autoload/plug.vim" ]; then
        curl -fsSLo "${XDG_DATA_HOME}/nvim/site/autoload/plug.vim" --create-dirs "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
        nvim -c ':PlugInstall' -c 'qa!'
    fi
fi

if grep -q "ngrok:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which ngrok >/dev/null; then
        TEMPFILE=$(mktemp)
        if [[ "$OSTYPE" == "darwin"* ]]; then
            curl -fsSL "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-amd64.zip" > "${TEMPFILE}.zip"
        else
            curl -fsSL "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip" > "${TEMPFILE}.zip"
        fi
        sudo unzip "${TEMPFILE}.zip" -d /usr/local/bin
    fi
fi

if grep -q "pastel:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which pastel >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install pastel
    fi
fi

if grep -q "poetry:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which poetry >/dev/null; then
        # TODO: sort out the pip user path outside of OSX
        /Users/kevin/Library/Python/3.7/bin/pipx install poetry
    fi
fi

if grep -q "pre-commit:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which pre-commit >/dev/null; then
        # TODO: sort out the pip user path outside of OSX
        /Users/kevin/Library/Python/3.7/bin/pipx install pre-commit
        pre-commit init-templatedir ~/.config/git/template/
    fi
fi

if grep -q "prettyping:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which prettyping >/dev/null; then
        sudo curl -fsSLo /usr/local/bin/prettyping "https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping"
        sudo chmod a+x /usr/local/bin/prettyping
    fi
fi

if grep -q "pyls:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which pyls >/dev/null; then
        # TODO: sort out the pip user path outside of OSX
        /Users/kevin/Library/Python/3.7/bin/pipx install "python-language-server[autopep8,mccabe,pycodestyle,pydocstyle,pyflakes,rope,yapf]"
        /Users/kevin/.local/pipx/venvs/python-language-server/bin/python -m pip install pyls-mypy
        /Users/kevin/.local/pipx/venvs/python-language-server/bin/python -m pip install pyls-isort
    fi
fi

if grep -q "ripgrep:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which rg >/dev/null; then
        export CARGO_HOME="${XDG_DATA_HOME}/cargo"
        cargo install ripgrep
    fi
fi

if grep -q "sublime-text:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! -f "/Applications/Sublime Text.app/Contents/MacOS/Sublime Text" ]]; then
            brew cask install sublime-text
            curl -fsSL "https://packagecontrol.io/Package Control.sublime-package" \
                -o ~/"Library/Application Support/Sublime Text 3/Installed Packages/Package Control.sublime-package"
        fi
    else
        if ! which subl >/dev/null; then
            eval "${PACMAN_INSTALL} sublime-text"
            curl -fsSL "https://packagecontrol.io/Package Control.sublime-package" \
                -o ~/".config/sublime-text-3/Installed Packages/Package Control.sublime-package"
        fi
    fi
fi

if grep -q "taskwarrior:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which task >/dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} task"
        else
            eval "${PACMAN_INSTALL} taskwarrior"
        fi
    fi
fi

if grep -q "tmuxifier:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which tmuxifier >/dev/null; then
        git clone https://github.com/jimeh/tmuxifier.git "${XDG_SRC_HOME}/tmuxifier"
    fi
fi

if grep -q "twine:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which twine >/dev/null; then
        # TODO: sort out the pip user path outside of OSX
        /Users/kevin/Library/Python/3.7/bin/pipx install twine
    fi
fi

if grep -q "universal-ctags:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if [[ ! -f "/usr/local/bin/ctags" ]]; then
        # TODO: can we pacman this on Linux? Its in macports...

        # TODO: linux version of this dependency seems to be builtin?
        if [[ "$OSTYPE" == "darwin"* ]]; then
            eval "${PACMAN_INSTALL} libyaml"
        fi

        git clone https://github.com/universal-ctags/ctags.git "${XDG_SRC_HOME}/universal-ctags"
        (
            cd "${XDG_SRC_HOME}/universal-ctags"
            ./autogen.sh
            ./configure --prefix=/usr/local --disable-xml
            make
            make install || sudo make install
        )
    fi
fi

if grep -q "yq:sh" "${XDG_CONFIG_HOME}/dotsystem/packages"; then
    if ! which yq >/dev/null; then
        # TODO: sort out the pip user path outside of OSX
        /Users/kevin/Library/Python/3.7/bin/pipx install yq
    fi
fi

# Complete post-installation bootstrapping operations
if [[ "${BOOTSTRAP}" == "y" ]]; then
    echo "Setting default shell to zsh..."
    chsh -s $(which zsh)
    sudo chsh -s $(which zsh)

    echo "Uploading new ssh key to Github..."
    lpass ls >/dev/null || lpass login KevinJames@thekev.in
    curl -s \
        -u "thekevjames:$(lpass show --note dotsystem/github-token)" \
        --data '{"title":"'"${NEW_HOSTNAME}"'","key":"'"$(cat ~/.ssh/id_ed25519.pub)"'"}' \
        https://api.github.com/user/keys

    # Now that our ssh key is connected to Github...
    git remote set-url origin git@github.com:TheKevJames/dotsystem.git

    echo "Importing gpg keys..."
    # TODO: configure emails in env
    for email in "KevinJames@thekev.in" "kevin@talkiq.com" "kjames@dialpad.com"; do
        echo "Creating key for ${email}..."
        # TODO: give direct path to `GOPATH="${XDG_DATA_HOME}/go"` ?
        passphrase2pgp -se -u "Kevin James <${email}>" | gpg --import
    done

    # TODO: should I just add all keys?
    #     curl https://github.com/thekevjames.keys >> ~/.ssh/authorized_keys
    echo "Adding emergency backup key to ~/.ssh/authorized_keys..."
    passphrase2pgp -u emergency -f ssh -p >> ~/.ssh/authorized_keys
    # To regain access to a machine if all goes wrong:
    #     (umask 077; passphrase2pgp -u emergency -f ssh > ~/.ssh/emergency)
    #     ssh-add ~/.ssh/emergency
    #     rm ~/.ssh/emergency
    #     ssh-copy-id -i ~/.ssh/id_ed25519 important.example.com
fi

echo "done."
