#!/bin/bash
# ARG_OPTIONAL_SINGLE([count],[c],[maximum attempts],[9999])
# ARG_OPTIONAL_SINGLE([timeout],[t],[sleep time between attempts],[10])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARG_POSITIONAL_INF([command],[command to run],[1])
# ARG_HELP([Retry command until it succeeds])
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}


begins_with_short_option()
{
    local first_option all_short_options='cth'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command=('' )
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_count="9999"
_arg_timeout="10"


print_help()
{
    printf '%s\n' "Retry command until it succeeds"
    printf 'Usage: %s [-c|--count <arg>] [-t|--timeout <arg>] [-h|--help] [--] <command-1> [<command-2>] ... [<command-n>] ...\n' "$0"
    printf '\t%s\n' "<command>: command to run"
    printf '\t%s\n' "-c, --count: maximum attempts (default: '9999')"
    printf '\t%s\n' "-t, --timeout: sleep time between attempts (default: '10')"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        if test "$_key" = '--'
        then
            shift
            test $# -gt 0 || break
            _positionals+=("$@")
            _positionals_count=$((_positionals_count + $#))
            shift $(($# - 1))
            _last_positional="$1"
            break
        fi
        case "$_key" in
            -c|--count)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_count="$2"
                shift
                ;;
            --count=*)
                _arg_count="${_key##--count=}"
                ;;
            -c*)
                _arg_count="${_key##-c}"
                ;;
            -t|--timeout)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_timeout="$2"
                shift
                ;;
            --timeout=*)
                _arg_timeout="${_key##--timeout=}"
                ;;
            -t*)
                _arg_timeout="${_key##-t}"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    local _required_args_string="'command'"
    test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_command "
    _our_args=$((${#_positionals[@]} - 1))
    for ((ii = 0; ii < _our_args; ii++))
    do
        _positional_names="$_positional_names _arg_command[$((ii + 1))]"
    done

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#

n=0
until [ $n -ge "${_arg_count:-9999}" ]; do
    "${_arg_command[@]:-true}" && break
    n=$((n+1))
    sleep "${_arg_timeout:-10}"
done

#
# ] <-- needed because of Argbash
