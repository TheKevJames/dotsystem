#!/usr/bin/env bash
# TODO: also capture stashes
set -euo pipefail
# ARG_OPTIONAL_BOOLEAN([local],[],[include local branches],[on])
# ARG_OPTIONAL_BOOLEAN([stash],[],[include local stashes],[on])
# ARG_OPTIONAL_SINGLE([remote-prefix],[r],[include remotes with prefix],[])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARG_POSITIONAL_SINGLE([folder],[search folder],[.])
# ARG_HELP([Find WIP branches and stashes])
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}


begins_with_short_option()
{
    local first_option all_short_options='rh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_folder="."
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_local="on"
_arg_stash="on"
_arg_remote_prefix=


print_help()
{
    printf '%s\n' "Find WIP branches and stashes"
    printf 'Usage: %s [--(no-)local] [--(no-)stash] [-r|--remote-prefix <arg>] [-h|--help] [--] [<folder>]\n' "$0"
    printf '\t%s\n' "<folder>: search folder (default: '.')"
    printf '\t%s\n' "--local, --no-local: include local branches (on by default)"
    printf '\t%s\n' "--stash, --no-stash: include local stashes (on by default)"
    printf '\t%s\n' "-r, --remote-prefix: include remotes with prefix (no default)"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        if test "$_key" = '--'
        then
            shift
            test $# -gt 0 || break
            _positionals+=("$@")
            _positionals_count=$((_positionals_count + $#))
            shift $(($# - 1))
            _last_positional="$1"
            break
        fi
        case "$_key" in
            --no-local|--local)
                _arg_local="on"
                test "${1:0:5}" = "--no-" && _arg_local="off"
                ;;
            --no-stash|--stash)
                _arg_stash="on"
                test "${1:0:5}" = "--no-" && _arg_stash="off"
                ;;
            -r|--remote-prefix)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_remote_prefix="$2"
                shift
                ;;
            --remote-prefix=*)
                _arg_remote_prefix="${_key##--remote-prefix=}"
                ;;
            -r*)
                _arg_remote_prefix="${_key##-r}"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_folder "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#

# TODO: support pointing at current dir, eg. with something like:
#   fd -td -d2 -u '^.git$' "${_arg_folder}"
for folder in $(fd -td -d1 "${_arg_folder:-.}"); do
    if [ "${_arg_local:-on}" = on ]; then
        readarray -t branches <<<"$(git --git-dir "./${folder}/.git" branch \
                                    | grep -vE '^[ \*] master$' \
                                    | grep -vE '^[ \*] main$' \
                                    ||:)"
    fi
    if [[ -n "${_arg_remote_prefix}" ]]; then
        readarray -t remotes <<<"$(git --git-dir "./${folder}/.git" branch -a \
                                   | grep -E '^[ \*] remotes/\w+/'"${_arg_remote_prefix}" \
                                   ||:)"
    fi
    if [ "${_arg_stash:-on}" = on ]; then
        readarray -t stashes <<<"$(git --git-dir "./${folder}/.git" stash list \
                                   ||:)"
    fi

    results=()
    while read -r; do
        [[ -n "${REPLY}" ]] && results+=("$REPLY")
    done < <(printf '%s\n' "${branches[@]}" "${remotes[@]}" "${stashes[@]}" | sed -E 's#remotes/[[:alnum:]]+/##' | sort -u)

    [[ -n "${results[*]}" ]] && {
        echo "${folder}"
        ( IFS=$'\n'; echo "${results[*]}" )
        echo
    }
done

#
# ] <-- needed because of Argbash
