#!/usr/bin/env python3
import json
import os
import pathlib
import shutil
import sys


CODING_DIR = pathlib.Path.home() / 'coding'
PROJECT_DIR = CODING_DIR / 'sublime-projects'


def get_project_paths():
    for dirpath, dirnames, _ in os.walk(CODING_DIR):
        if '.git' in dirnames:
            yield dirpath
            del dirnames[:]


def build_sublime_projects():
    for path in get_project_paths():
        name = path.replace(str(CODING_DIR), '')[1:]

        project = (PROJECT_DIR / name).with_suffix('.sublime-project')
        project.parent.mkdir(parents=True, exist_ok=True)
        project.write_text(json.dumps({
            'folders': [{'path': str(path)}],
        }))

        workspace = (PROJECT_DIR / name).with_suffix('.sublime-workspace')
        workspace.parent.mkdir(parents=True, exist_ok=True)
        workspace.write_text(json.dumps({
            'expanded_folders': [path],
            'find_in_files': {'where_history': ['-.nox/,-.tox/-venv/']},
            'project': project.name,
        }))

        yield str(workspace)


def main():
    try:
        shutil.rmtree(PROJECT_DIR)
    except FileNotFoundError:
        pass
    PROJECT_DIR.mkdir()

    workspaces = list(build_sublime_projects())

    if sys.platform.startswith('linux'):
        session_root = pathlib.Path.home() / '.config' / 'sublime-text-3'
    elif sys.platform == 'darwin':
        session_root = (pathlib.Path.home() / 'Library' /
                        'Application Support' / 'Sublime Text 3')
    else:
        raise Exception(f'unsupported platform {sys.platform}')
    session = (session_root / 'Local' / 'Session.sublime_session')

    session_data = json.loads(session.read_text())
    session_data['workspaces']['recent_workspaces'] = workspaces
    session.write_text(json.dumps(session_data))


if __name__ == '__main__':
    main()
