#!/usr/bin/env python3
import json
import os
import pathlib
import shutil
import sys
from typing import Iterable
from typing import List


PROJECT_DIR = pathlib.Path.home() / '.xdg' / 'Documents' / 'sublime-projects'


def get_project_paths(repo_dirs: List[pathlib.Path]) -> Iterable[str]:
    for repo_dir in repo_dirs:
        for dirpath, dirnames, _ in os.walk(repo_dir):
            if '.git' in dirnames:
                yield dirpath
                del dirnames[:]


def build_sublime_projects(repo_dirs: List[pathlib.Path]) -> Iterable[str]:
    for path in get_project_paths(repo_dirs):
        name = path.replace(str(pathlib.Path.home()), '')[1:]

        project = (PROJECT_DIR / name).with_suffix('.sublime-project')
        project.parent.mkdir(parents=True, exist_ok=True)
        project.write_text(json.dumps({
            'folders': [{'path': str(path)}],
        }))

        workspace = (PROJECT_DIR / name).with_suffix('.sublime-workspace')
        workspace.parent.mkdir(parents=True, exist_ok=True)
        workspace.write_text(json.dumps({
            'expanded_folders': [path],
            'find_in_files': {
                'where_history': [
                    ','.join(['-.coverage', '-.eggs/', '-.mypy_cache/',
                              '-.nox/', '-.pytest_cache/', '-.terraform/',
                              '-.tox/', '-build/', '-venv/', '-*.fst',
                              '-*.otf', '-*.pcl', '-*.svg', '-*.tgz',
                              '-*.woff', '-*.woff2'])
                ],
            },
            'project': project.name,
        }))

        yield str(workspace)


def main() -> None:
    try:
        shutil.rmtree(PROJECT_DIR)
    except FileNotFoundError:
        pass
    PROJECT_DIR.mkdir()

    repo_dirs = [
        pathlib.Path.home() / 'src',
    ]
    workspaces = list(build_sublime_projects(repo_dirs))

    if sys.platform.startswith('linux'):
        session_root = pathlib.Path.home() / '.config' / 'sublime-text-3'
    elif sys.platform == 'darwin':
        session_root = (pathlib.Path.home() / 'Library'
                        / 'Application Support' / 'Sublime Text 3')
    else:
        raise Exception(f'unsupported platform {sys.platform}')
    session = (session_root / 'Local' / 'Session.sublime_session')

    try:
        session_data = json.loads(session.read_text())
        session_data['workspaces']['recent_workspaces'] = workspaces
        session.write_text(json.dumps(session_data))
    except FileNotFoundError:
        print('ERROR: cannot set recent workspaces, no existing session',
              file=sys.stderr)


if __name__ == '__main__':
    main()
