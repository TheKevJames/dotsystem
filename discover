#!/usr/bin/env python3
import pathlib
from collections.abc import Iterator


HOME = pathlib.Path.home()
ROOT = pathlib.Path(__file__).parent / 'root' / '~'
FOLDERS = [
    '.config/gcloud/configurations',
    '.config/nvim',
    '.config/tmuxifier/layouts',
    '.config/zsh/dropins',
    '.local/bin',
]


def find(folder: pathlib.Path) -> Iterator[pathlib.Path]:
    for file in (HOME / folder).rglob('*'):
        # TODO: filter out expected:
        #   .local/bin/git-standup (and other src builds -> local bins)
        if file.is_file() and not file.is_symlink():
            sourcefile = ROOT / file.relative_to(HOME)
            m4file = sourcefile.with_suffix(f'{sourcefile.suffix}.m4')
            if not any(x.exists() for x in (sourcefile, m4file)):
                yield file


def main() -> None:
    print('Discovering files in need of backup...')

    for folder in FOLDERS:
        files = list(find(folder))
        if files:
            print()
            print(f'The following files in {folder} may be in need of backup:')
            for file in files:
                print(file)


if __name__ == '__main__':
    main()
